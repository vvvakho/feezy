// Code generated by MockGen. DO NOT EDIT.
// Source: billing/service/service.go
//
// Generated by this command:
//
//	mockgen -source=billing/service/service.go -destination=billing/mocks/service_mocks.go
//

// Package mock_billing is a generated GoMock package.
package mock_billing

import (
	context "context"
	reflect "reflect"

	domain "github.com/vvvakho/feezy/billing/service/domain"
	workflows "github.com/vvvakho/feezy/billing/workflows"
	gomock "go.uber.org/mock/gomock"
)

// MockExecution is a mock of Execution interface.
type MockExecution struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionMockRecorder
	isgomock struct{}
}

// MockExecutionMockRecorder is the mock recorder for MockExecution.
type MockExecutionMockRecorder struct {
	mock *MockExecution
}

// NewMockExecution creates a new mock instance.
func NewMockExecution(ctrl *gomock.Controller) *MockExecution {
	mock := &MockExecution{ctrl: ctrl}
	mock.recorder = &MockExecutionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecution) EXPECT() *MockExecutionMockRecorder {
	return m.recorder
}

// AddLineItemSignal mocks base method.
func (m *MockExecution) AddLineItemSignal(arg0 context.Context, arg1 string, arg2 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineItemSignal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLineItemSignal indicates an expected call of AddLineItemSignal.
func (mr *MockExecutionMockRecorder) AddLineItemSignal(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineItemSignal", reflect.TypeOf((*MockExecution)(nil).AddLineItemSignal), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockExecution) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockExecutionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecution)(nil).Close))
}

// CloseBillUpdate mocks base method.
func (m *MockExecution) CloseBillUpdate(arg0 context.Context, arg1 string, arg2 *workflows.CloseBillSignal) (*domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBillUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseBillUpdate indicates an expected call of CloseBillUpdate.
func (mr *MockExecutionMockRecorder) CloseBillUpdate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBillUpdate", reflect.TypeOf((*MockExecution)(nil).CloseBillUpdate), arg0, arg1, arg2)
}

// CreateBillWorkflow mocks base method.
func (m *MockExecution) CreateBillWorkflow(arg0 context.Context, arg1 *domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBillWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBillWorkflow indicates an expected call of CreateBillWorkflow.
func (mr *MockExecutionMockRecorder) CreateBillWorkflow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillWorkflow", reflect.TypeOf((*MockExecution)(nil).CreateBillWorkflow), arg0, arg1)
}

// GetBillQuery mocks base method.
func (m *MockExecution) GetBillQuery(arg0 context.Context, arg1 string, arg2 *domain.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBillQuery indicates an expected call of GetBillQuery.
func (mr *MockExecutionMockRecorder) GetBillQuery(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillQuery", reflect.TypeOf((*MockExecution)(nil).GetBillQuery), arg0, arg1, arg2)
}

// IsWorkflowRunning mocks base method.
func (m *MockExecution) IsWorkflowRunning(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWorkflowRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsWorkflowRunning indicates an expected call of IsWorkflowRunning.
func (mr *MockExecutionMockRecorder) IsWorkflowRunning(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWorkflowRunning", reflect.TypeOf((*MockExecution)(nil).IsWorkflowRunning), arg0)
}

// RemoveLineItemSignal mocks base method.
func (m *MockExecution) RemoveLineItemSignal(arg0 context.Context, arg1 string, arg2 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLineItemSignal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLineItemSignal indicates an expected call of RemoveLineItemSignal.
func (mr *MockExecutionMockRecorder) RemoveLineItemSignal(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLineItemSignal", reflect.TypeOf((*MockExecution)(nil).RemoveLineItemSignal), arg0, arg1, arg2)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetClosedBillFromDB mocks base method.
func (m *MockRepository) GetClosedBillFromDB(arg0 context.Context, arg1 string) (*domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedBillFromDB", arg0, arg1)
	ret0, _ := ret[0].(*domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedBillFromDB indicates an expected call of GetClosedBillFromDB.
func (mr *MockRepositoryMockRecorder) GetClosedBillFromDB(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedBillFromDB", reflect.TypeOf((*MockRepository)(nil).GetClosedBillFromDB), arg0, arg1)
}

// GetClosedBillItemsFromDB mocks base method.
func (m *MockRepository) GetClosedBillItemsFromDB(arg0 context.Context, arg1 string) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosedBillItemsFromDB", arg0, arg1)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosedBillItemsFromDB indicates an expected call of GetClosedBillItemsFromDB.
func (mr *MockRepositoryMockRecorder) GetClosedBillItemsFromDB(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosedBillItemsFromDB", reflect.TypeOf((*MockRepository)(nil).GetClosedBillItemsFromDB), arg0, arg1)
}

// GetOpenBillFromDB mocks base method.
func (m *MockRepository) GetOpenBillFromDB(arg0 context.Context, arg1 string) (*domain.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenBillFromDB", arg0, arg1)
	ret0, _ := ret[0].(*domain.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenBillFromDB indicates an expected call of GetOpenBillFromDB.
func (mr *MockRepositoryMockRecorder) GetOpenBillFromDB(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenBillFromDB", reflect.TypeOf((*MockRepository)(nil).GetOpenBillFromDB), arg0, arg1)
}
